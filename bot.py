import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from tasks import schedule_tasks, get_tasks_for_today

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '7839999143:AAH6_LDAAbAyr4sWlhu70h2Up1nJxjUIeRk'
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

CHAT_ID = None  # ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    global CHAT_ID
    CHAT_ID = message.chat.id
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π /tasks, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
    )
    # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    schedule_tasks(scheduler, bot, CHAT_ID)
    scheduler.start()

# –ö–æ–º–∞–Ω–¥–∞ /tasks
@dp.message(Command("tasks"))
async def tasks_command(message: types.Message):
    tasks = get_tasks_for_today()
    if not tasks:
        await message.answer("–ó–∞–¥–∞—á, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ—Ç!")
        return

    for i, task in enumerate(tasks):
        status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if task["is_completed"] else "üîÑ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=status, callback_data=f"complete_{i}")]
            ]
        )
        await message.answer(f"üïí {task['time']} ‚Äî {task['task']}", reply_markup=keyboard)


@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "*–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:*\n\n"
        "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞—à —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
        "‚Ä¢ `/help` - –£–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å.\n"
        "‚Ä¢ `/tasks` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –í—ã —É–≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
        "\n"
        "‚è∞ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
        "1. –ó–∞–¥–∞—á–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é —É–∂–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω—ã.\n"
        "2. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
        "3. –í—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/tasks` –∏ –æ—Ç–º–µ—á–∞—Ç—å –∏—Ö –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.\n"
        "\n"
        "üîÑ **–ö–∞–∫ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:**\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´üîÑ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª —Ä—è–¥–æ–º —Å –∑–∞–¥–∞—á–µ–π, –∏ –æ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ ¬´‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª.\n"
        "\n"
        "üí° **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ `/tasks`, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.\n"
        "‚Ä¢ –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤–∞–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ —Å—Ç–∞—Ç—É—Å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
        "‚Ä¢ –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –¥–ª—è –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda c: c.data.startswith("complete_"))
async def complete_task(callback_query: CallbackQuery):
    task_id = int(callback_query.data.split("_")[1])
    tasks = get_tasks_for_today()

    if 0 <= task_id < len(tasks):
        task = tasks[task_id]
        if not task["is_completed"]:
            task["is_completed"] = True
            new_text = f"üïí {task['time']} ‚Äî {task['task']} ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
            await callback_query.message.edit_text(new_text)
            await callback_query.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
        else:
            await callback_query.answer("–ó–∞–¥–∞—á–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    else:
        await callback_query.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    if CHAT_ID is None:
        print("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
    else:
        schedule_tasks(scheduler, bot, CHAT_ID)
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())